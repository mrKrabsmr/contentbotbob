package bot

import (
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/mrKrabsmr/contentbottelegram/internal/clients/backend"
)

var (
	mainMenuKeyboard = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton(cmdProfile),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton(cmdChan),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton(cmdSubs),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton(cmdLogout),
		),
	)

	authKeyboard = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton(cmdRegister),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton(cmdLogin),
		),
	)

	backKeyboard = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton(cmdBack),
		),
	)
)

const (
	cmdStart    = "start"
	cmdRegister = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
	cmdLogin    = "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"
	cmdLogout   = "–í—ã–π—Ç–∏"
	cmdProfile  = "–ü—Ä–æ—Ñ–∏–ª—å"
	cmdChan     = "–ú–æ–∏ –∫–∞–Ω–∞–ª—ã"
	cmdSubs     = "–ü–æ–¥–ø–∏—Å–∫–∏"
	cmdBack     = "–ù–∞–∑–∞–¥"
	cmdAddChan  = "–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª"
)

const (
	txtStartRegister      = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è. –ü—Ä–∏–¥—É–º–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π username:"
	txtStartLogin         = "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à username:"
	txtSuccessfulRegister = `–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å! –ù–∞ –≤–∞—à—É –ø–æ—á—Ç—É –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
–ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∏ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ü—Ä–æ—Ñ–∏–ª—å" –ø–æ–¥–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ–π email.`
	txtSuccessfulLogin  = "–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å!"
	txtSuccessfulLogout = "–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞"
	txtNeedAuth         = "–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è"
	txtBack             = "–ü—Ä–∏–Ω—è—Ç–æ. –ù–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
	txtErrMinRating     = "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10"
	txtErrNotLaterDays  = "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ"
	txtStartAddChannel  = `–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –≤—ã –¥–æ–ª–∂–Ω—ã —É–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–¥–ª–∏–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ. 
–û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ —á–µ—Ç–∫–æ, –∫–∞–∫ –ø–æ–ª–æ–∂–µ–Ω–æ.

–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ, —Ç–µ–º–∞—Ç–∏–∫–∞ –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –∫–∞–Ω–∞–ª–∞, –∞ —Ç–∞–∫–∂–µ –µ–≥–æ id –≤ —ç—Ç–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –Ω–µ –º–æ–≥—É—Ç –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω—ã.
–ü–†–û–°–¨–ë–ê –û–¢–ù–ï–°–¢–ò–¢–¨ –ö –≠–¢–û–ú–£ –í–ù–ò–ú–ê–¢–ï–õ–¨–ù–û!

–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞:`
	txtPostFormatChoice = `–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –±–æ–ª—å—à–µ –ø–æ–¥—Ö–æ–¥–∏—Ç (–Ω–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞)
0. –ë–æ—Ç –±—É–¥–µ—Ç –≤–µ—Å—Ç–∏ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –≤–∞—à –∫–∞–Ω–∞–ª —Å–∞–º–æ–ª–∏—á–Ω–æ
1. –ë–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ—Å—Ç—ã –≤–∞–º –ª–∏—á–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º`
	txtNotAllowedAddChannel   = "–£ –≤–∞—Å –ª–∏–±–æ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏, –ª–∏–±–æ –≤—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–µ"
	txtChannelsEmpty          = "–í–∞–º–∏ –µ—â–µ –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∏ –æ–¥–∏–Ω –∫–∞–Ω–∞–ª"
	txtChannelSuccessfulAdded = "–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω"
)

const (
	callbackChannel    = "channel"
	callbackAddChannel = "addChan"
)

func txtProfile(profile *backend.ProfileResponse) string {
	txt := fmt.Sprintf(`
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s
–ü–æ—á—Ç–∞: %s
–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: %s
`, profile.Username, profile.Email, profile.RegisteredAt)

	if profile.Subscribe != nil {
		sub := profile.Subscribe
		txt += fmt.Sprintf(
			`–ü–æ–¥–ø–∏—Å–∫–∞: %s;
																	 	 –º–∞–∫—Å–∏–º—É–º –∫–∞–Ω–∞–ª–æ–≤: %d`,
			sub["name"].(string), int(sub["max_use_channels"].(float64)),
		)
	} else {
		txt += "–ü–æ–¥–ø–∏—Å–∫–∞: –Ω–µ—Ç"
	}

	return txt
}

func txtChannels(channels []*backend.ChannelResponse) (string, tgbotapi.InlineKeyboardMarkup) {
	var buttons [][]tgbotapi.InlineKeyboardButton
	var txt string
	for num, channel := range channels {
		var statusString, statusTxt, toDoTxt string
		if channel.StatusOn {
			statusString = "1"
			statusTxt = "üü¢"
			toDoTxt = "–≤—ã–∫–ª—é—á–∏—Ç—å"
		} else {
			statusString = "0"
			statusTxt = "üî¥"
			toDoTxt = "–≤–∫–ª—é—á–∏—Ç—å"
		}

		buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(channel.Name+" | "+toDoTxt, callbackChannel+channel.ID+statusString)),
		)

		txt += fmt.Sprintf(`
%d. %s
–¢–∏–ø: %s
–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: %s
–°—Ç–∞—Ç—É—Å: %s
`,
			num+1, channel.Name, channel.Type, channel.Resource, statusTxt,
		)
	}

	addChanButton := tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData(cmdAddChan, callbackAddChannel))
	buttons = append(buttons, addChanButton)

	if txt == "" {
		txt = txtChannelsEmpty
	}

	return txt, tgbotapi.NewInlineKeyboardMarkup(buttons...)
}
