package bot

import (
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/mrKrabsmr/contentbottelegram/internal/clients/backend"
)

var (
	mainMenuKeyboard = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton(cmdProfile),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton(cmdChan),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton(cmdSubs),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton(cmdLogout),
		),
	)

	authKeyboard = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton(cmdRegister),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton(cmdLogin),
		),
	)

	backKeyboard = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton(cmdBack),
		),
	)

	activateKeyboard = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton(cmdSendCode),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton(cmdActivate),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton(cmdBack),
		),
	)
)

const (
	cmdStart    = "start"
	cmdRegister = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
	cmdLogin    = "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"
	cmdLogout   = "–í—ã–π—Ç–∏"
	cmdProfile  = "–ü—Ä–æ—Ñ–∏–ª—å"
	cmdChan     = "–ú–æ–∏ –∫–∞–Ω–∞–ª—ã"
	cmdSubs     = "–ü–æ–¥–ø–∏—Å–∫–∏"
	cmdBack     = "–ù–∞–∑–∞–¥"
	cmdAddChan  = "–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª"
	cmdSendCode = "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –Ω–∞ –ø–æ—á—Ç—É"
	cmdActivate = "–í–≤–µ—Å—Ç–∏ –∫–æ–¥ –ø–æ–¥–≤–µ—Ä–∂–¥–∞–µ–Ω–∏—è"
)

const (
	txtSetEmail           = "–í–≤–µ–¥–∏—Ç–µ email:"
	txtSetPassword        = "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:"
	txtStartRegister      = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è. –ü—Ä–∏–¥—É–º–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π username:"
	txtStartLogin         = "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à username:"
	txtSuccessfulRegister = `–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å! –ù–∞ –≤–∞—à—É –ø–æ—á—Ç—É –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
–ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∏ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ü—Ä–æ—Ñ–∏–ª—å" –ø–æ–¥–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ–π email.`
	txtSuccessfulLogin       = "–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å!"
	txtSuccessfulLogout      = "–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞"
	txtNeedAuth              = "–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è"
	txtBack                  = "–ü—Ä–∏–Ω—è—Ç–æ. –ù–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
	txtSuccessActivate       = "–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–≤–µ—Ä–∂–¥–µ–Ω, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞"
	txtSuccessSettingsUpdate = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã"
	txtSuccessSendMail       = "—Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–∞–º –Ω–∞ –ø–æ—á—Ç—É"
	txtSetCode               = "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥: "
	txtStartAddChannel       = `–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –≤—ã –¥–æ–ª–∂–Ω—ã —É–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–¥–ª–∏–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ. 
–û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ —á–µ—Ç–∫–æ, –∫–∞–∫ –ø–æ–ª–æ–∂–µ–Ω–æ.

–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ, —Ç–µ–º–∞—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–∞, –∞ —Ç–∞–∫–∂–µ –µ–≥–æ id –Ω–µ –º–æ–≥—É—Ç –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω—ã.
–ü–†–û–°–¨–ë–ê –û–¢–ù–ï–°–¢–ò–¢–¨ –ö –≠–¢–û–ú–£ –í–ù–ò–ú–ê–¢–ï–õ–¨–ù–û!

–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞:`
	txtUnSupportType       = "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—É—é —Ç–µ–º–∞—Ç–∏–∫—É!"
	txtSetId               = "–í–≤–µ–¥–∏—Ç–µ id –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞. –í–Ω–∏–º–∞–Ω–∏–µ! –ø–æ–º–µ–Ω—è—Ç—å –µ–≥–æ –ø–æ—Ç–æ–º –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π id"
	txtIncorrectId         = "–ù–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ id"
	txtSetMinRating        = "–ü—Ä–∏—Å—Ç—É–ø–∞–µ–º –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º. –ò—Ö –º–æ–∂–Ω–æ –ø–æ—Ç–æ–º –ø–æ–º–µ–Ω—è—Ç—å. –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –æ—Ç 1 –¥–æ 10, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –≤–∞—à–µ–º –∫–∞–Ω–∞–ª–µ"
	txtErrMinRating        = "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10"
	txtErrMinRating2       = "–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ 10"
	txtSetNotLaterDays     = "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Å–ø—É—Å—Ç—è –∫–æ—Ç–æ—Ä—ã–µ –∫–æ–Ω—Ç–µ–Ω—Ç —É–∂–µ –Ω–µ –ø–æ–¥–ª–µ–∂–∏—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –≤–∞—à –∫–∞–Ω–∞–ª. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 3 –¥–Ω—è"
	txtErrNotLaterDays     = "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ"
	txtErrNotLaterDays2    = "–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–≤–Ω—ã–º –Ω—É–ª—é"
	txtSetLanguage         = "–í–≤–µ–¥–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è –ø–æ—Å—Ç–æ–≤. –°–µ–π—á–∞—Å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ 'ru'"
	txtErrLanguage         = "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —è–∑—ã–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"
	txtSetPeriod           = "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –≤ –º–∏–Ω—É—Ç–∞—Ö. –ù–µ –º–µ–Ω–µ–µ –¥–µ—Å—è—Ç–∏ –º–∏–Ω—É—Ç!"
	txtErrPeriod           = "–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å - —ç—Ç–æ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"
	txtErrPeriod2          = "–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –¥–µ—Å—è—Ç–∏ –º–∏–Ω—É—Ç"
	txtSetPostFormatChoice = `–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –±–æ–ª—å—à–µ –ø–æ–¥—Ö–æ–¥–∏—Ç (–Ω–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞)
0. –ë–æ—Ç –±—É–¥–µ—Ç –≤–µ—Å—Ç–∏ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –≤–∞—à –∫–∞–Ω–∞–ª —Å–∞–º–æ–ª–∏—á–Ω–æ
1. –ë–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ—Å—Ç—ã –≤–∞–º –ª–∏—á–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º`
	txtSetPostToChannels      = "–í–≤–µ–¥–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∫–∞–Ω–∞–ª? (–¥–∞/–Ω–µ—Ç) (–ø—Ä–∏ '–Ω–µ—Ç' –∫–æ–Ω—Ç–µ–Ω—Ç –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è) "
	txtSetAllowedFileEmpty    = "–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–æ–∫. (–¥–∞/–Ω–µ—Ç)"
	txtErrPostToChannels      = "–í–≤–µ–¥–∏—Ç–µ –ª–∏–±–æ 0, –ª–∏–±–æ 1"
	txtErrAllowedFileEmpty    = "–í–≤–µ–¥–∏—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'"
	txtNotAllowedAddChannel   = "–£ –≤–∞—Å –ª–∏–±–æ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏, –ª–∏–±–æ –≤—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–µ"
	txtChannelsEmpty          = "–í–∞–º–∏ –µ—â–µ –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∏ –æ–¥–∏–Ω –∫–∞–Ω–∞–ª"
	txtChannelSuccessfulAdded = "–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω"
	txtBotError               = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞"
)

const (
	callbackChannel             = "channel"
	callbackChannelSettings     = "settingsChannel"
	callbackChannelSettingsItem = "itemChannelSettings"
	callbackAddChannel          = "addChan"
	callbackSub                 = "subscribe"
)

var useChanTypes = []string{
	"all",
	"crypto",
	"films",
	"animals",
    "retails",
	"cybersport",
	"sport",
	"football",
	"basketball",
	"volleyball",
	"tennis",
	"boxing",
	"auto",
	"figureskating",
	"hockey",
}

func txtProfile(profile *backend.ProfileResponse) (string, bool) {
	var confirmTxt string
	if profile.IsConfirmed {
		confirmTxt = "‚úÖ"
	} else {
		confirmTxt = "‚ùå"
	}

	txt := fmt.Sprintf(`
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s
–ü–æ—á—Ç–∞: %s
–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: %s
–ê–∫–∫–∞—É–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: %s
`, profile.Username, profile.Email, profile.RegisteredAt, confirmTxt)

	if profile.Subscribe != nil {
		sub := profile.Subscribe
		txt += fmt.Sprintf(
			`–ü–æ–¥–ø–∏—Å–∫–∞: %s;
																	 	 –º–∞–∫—Å–∏–º—É–º –∫–∞–Ω–∞–ª–æ–≤: %d`,
			sub["name"].(string), int(sub["max_use_channels"].(float64)),
		)
	} else {
		txt += "–ü–æ–¥–ø–∏—Å–∫–∞: –Ω–µ—Ç"
	}

	if !profile.IsConfirmed {

	}

	if !profile.IsConfirmed {
		return txt, false
	}

	return txt, true
}

func txtChannels(channels []*backend.ChannelResponse) (string, tgbotapi.InlineKeyboardMarkup) {
	var buttons [][]tgbotapi.InlineKeyboardButton
	var txt string
	for num, channel := range channels {
		var statusString, statusTxt, toDoTxt string
		if channel.StatusOn {
			statusString = "1"
			statusTxt = "üü¢"
			toDoTxt = "–≤—ã–∫–ª—é—á–∏—Ç—å"
		} else {
			statusString = "0"
			statusTxt = "üî¥"
			toDoTxt = "–≤–∫–ª—é—á–∏—Ç—å"
		}

		buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				channel.Name+" | "+toDoTxt,
				callbackChannel+channel.OuterID+statusString),
		),
		)

		buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(fmt.Sprintf(
				"–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ¬´%s¬ª", channel.Name),
				callbackChannelSettings+channel.OuterID),
		),
		)

		txt += fmt.Sprintf(`
%d. %s
–¢–∏–ø: %s
–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: %s
–°—Ç–∞—Ç—É—Å: %s
`,
			num+1, channel.Name, channel.Type, channel.Resource, statusTxt,
		)
	}

	addChanButton := tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData(cmdAddChan, callbackAddChannel))
	buttons = append(buttons, addChanButton)

	if txt == "" {
		txt = txtChannelsEmpty
	}

	return txt, tgbotapi.NewInlineKeyboardMarkup(buttons...)
}

func txtChannelSettingsChange(chanId string, settings *backend.ChannelSettingsResponse, period int, postToChannels bool) (string, tgbotapi.InlineKeyboardMarkup) {
	var allowedEmptyFile string
	if settings.EmptyFileAllowed {
		allowedEmptyFile = "–†–∞–∑—Ä–µ—à–µ–Ω–æ"
	} else {
		allowedEmptyFile = "–ó–∞–ø—Ä–µ—â–µ–Ω–æ"
	}

	var postTo string
	if postToChannels {
		postTo = "–¥–∞"
	} else {
		postTo = "–Ω–µ—Ç"
	}

	items := map[string]interface{}{
		"min_rating":         fmt.Sprintf("–ú–∏–Ω. —Ä–µ–π—Ç–∏–Ω–≥ (%d)", settings.MinRating),
		"empty_file_allowed": fmt.Sprintf("–†–∞–∑—Ä. –±–µ–∑ –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤ (%s)", allowedEmptyFile),
		"not_later_days":     fmt.Sprintf("–°—Ä–æ–∫ –≥–æ–¥–Ω. (%d –¥.)", settings.NotLaterDays),
		"language":           fmt.Sprintf("–Ø–∑—ã–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (%s)", settings.Language),
		"period":             fmt.Sprintf("–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å (—Ä–∞–∑ –≤ %d –º.)", period),
		"post_to_channels":   fmt.Sprintf("–°—Ä–∞–∑—É –≤ –∫–∞–Ω–∞–ª (%s)", postTo),
	}

	var buttons [][]tgbotapi.InlineKeyboardButton
	for key, item := range items {
		buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(item.(string), callbackChannelSettingsItem+chanId+":-"+key)),
		)
	}

	return "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å", tgbotapi.NewInlineKeyboardMarkup(buttons...)
}

func txtSubscribe(message *tgbotapi.Message, sub *backend.SubscribeResponse, provToken string) tgbotapi.InvoiceConfig {
	val, _ := sub.PriceRub.Float64()

	title := fmt.Sprintf("%s (–º–∞–∫—Å. –∫–∞–Ω–∞–ª–æ–≤: %d)", sub.Name, sub.MaxUseChannels)

	label := []tgbotapi.LabeledPrice{tgbotapi.LabeledPrice{
		Label:  title,
		Amount: int(val) * 100,
	}}

	invoice := tgbotapi.NewInvoice(
		message.Chat.ID,
		title,
		sub.Description,
		"test-payload",
		provToken,
		"kekekek",
		"rub",
		label,
	)
	invoice.MaxTipAmount = 50 * 100
	invoice.SuggestedTipAmounts = []int{5 * 100, 25 * 100, 50 * 100}

	return invoice
}

func txtChannelTypesAllowed() string {
	txt := "–≤–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –∫–∞–Ω–∞–ª–∞ (—Ç–µ–º–∞—Ç–∏–∫–∞). –°–µ–π—á–∞—Å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è:\n"
	for _, element := range useChanTypes {
		txt += fmt.Sprintf("'%s'\n", element)
	}

	return txt
}
